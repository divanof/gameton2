{
  "swagger": "2.0",
  "info": {
    "title": "DatsMagic",
    "version": "1.0",
    "description": "\n<img src='./img/datsmagic_1.png' />\n\n**Легенда:** Научные сотрудники НИИ Чудес воплотили в реальность мечты о полётах на ковре-самолёте. И стало возможным добраться до всех сокровищ пустыни. Но, ОСТОРОЖНО! На пути вам встретятся аномальные вихри, и вы не одни охотитесь за этими богатствами.\n\n *Взлетаем! Сокровища пустыни ждут.*\n\n\n  **Этапы** (время — UTC +03:00):\n\n - 1-й день — 11.10.2024: \n - - Тренировочные раунды: с 19:00 до 22:00\n\n- 2-й день — 12.10.2024:\n - - Тренировочные раунды: с 10:00\n - - Финальные раунды: с 17:00 до 20:00\n - - Трансляция финала: с 18:00 до 20:00\n\n\nПосле завершения игры тестовый сервер продолжит работу до следующего воскресенья.\n# Внимание\n\n Администраторы оставляют за собой право приостановить действие токена игрока если появилось подозрение в следующем:\n - игрок нарочно поддается другим\n - игрок пытается навредить игровому серверу\n - игрок раскрыл свой токен другим игрокам\n - мультиаккаунт\n - игрок не соблюдает кодекс чата\n\n Токен может быть восстановлен если породившая его ситуация была решена.\n\n# Механика\n\n Все действия на карте происходят непрерывно (десятки раз в секунду).\n Игроки имеют возможность 3 раза в секунду вызывать API (ограничение на токен).\n Действие происходит на одной карте, все игроки могут взаимодействовать между собой (атака, столкновение, кража золота из-под носа).\n\n\n\n# Сервер\n\n Параллельно будут существовать 2 сервера на протяжении всей игры: тестовый и основной.\n До начала финала игроки могут делать отладку своих ботов на тестовом сервере (также они могут это делать и во время финала).\n  \n# Раунды\n\n  Игра будет проходить по раундам. Расписание можно получить по API.\n\n\n# Карта\n\n  Размеры карты статичны и будут предоставлены игрокам в API.\n Все игроки находятся на одной карте.\n Для удобства каждый пиксель карты мы будем называть метром.\n Информация по всем существующим аномалиям доступна сразу, независимо от расстояния до них.\n Информация по золоту и коврам соперников доступна в радиусе примерно 300 метров от ваших ковров. \n\n\n# Аномалии\n\n На карте расположено некоторое количество аномалий. Их фигура представляет собой правильный круг с радиусом R1. Каждая аномалия имеет область воздействия, которая также представлена в виде круга с радиусом R2, центр которого находится в центре аномалии. Для радиусов аномалии и её области всегда выполняется условие R1 <= R2.\n\n Есть вероятность появления аномалии без радиуса (R1 = R2).\n Аномалии бывают 2-х типов: притягивающие и отталкивающие. Если сила(strength) аномалии отрицательная - то аномалия отталкивает ковер.\n  \n Если ковер попадает в область влияния аномалий, на него начинает действовать притяжение / отталкивание по X и Y. Чем ближе к границе аномалии — тем сильнее воздействие. \n Формула притяжения(ускорения) описывается следующим образом: a=sign(S)*S^2/d^2, где **S** это сила аномалии(в API свойство strength), **d** - это расстояние между ковром и центром аномалии\n \n  \n При столкновении с границей аномалии (R1) ковёр уничтожается.\n  Аномалии медленно перемещаются по карте.\n  Ковёр может находиться в области действия сразу нескольких аномалий. В этом случае их воздействия суммируются.\n\n\n\n # Золото\n\n В зоне действия аномалий появляются золотые монеты, которые необходимо собрать. Монеты остаются на том же месте, где появились,  даже если породившая их аномалия переместилась.\n  \n Золотая монета представляет из себя круг радиуса R с центром в точке XY. Для того, чтобы её собрать, нужно чтобы ковёр проехал в области радиуса R. Значения R игроки получают в API.\n  \n После появления монеты ее номинал не изменяется. Номинал монет зависит от текущей минуты и расположения монеты. Пример:\n\n **координата 0 0:**\n\n на 5 минуте - 1, на 30 минуте - 2, на 55 минуте - 4\n\n **координата 2000 2000:**\n\n на 5 минуте - 1, на 30 минуте - 59, на 55 минуте - 119\n\n **координата 4500 4500:**\n\n на 5 минуте - 1, на 30 минуте - 242, на 55 минуте - 484\n\n В игре золото можно заработать следующим образом:\n - сбор монет\n - уничтожение ковров игроков\n\n За уничтожение ковра путем “тарана” золото никому не начисляется.\n За уничтожение выстрелом своих ковров золото тоже не начисляется.\n  \n Максимальное количество золотых монет на карте в один момент времени ограничено количеством играющих команд.\n  \n При потере ковра в результате атаки другого игрока вы теряете 5% от текущего золота.\n При уничтожении ковра соперника вы получаете 3% от его текущего золота.\n При потере ковра от столкновения (с другим ковром, аномалией или границей карты) вы теряете 5% от текущего золота.\n За каждую поднятую золотую монету ковёр исцеляется на 10 единиц здоровья!\n\n **Пример**\n Если у игрока 100 золота и ни он, ни вы не находитесь на доске наград, при уничтожении его ковра вы получите 3 (3% от 100) золота, а атакованный вами игрок потеряет 5 (5% от 100) золота.\n Если у игрока было 0 золота, он ничего не потеряет, а вы ничего не получите. \n\n\n # Ковёр-самолёт\n\n В момент первого вызова API /move вам предоставляется 5 ковров-самолётов, расположенных в рандомных координатах каждый.\n  \n Ковёр представляет собой точку с координатами XY и имеет 100 очков здоровья.\n\n При потере ковра в зависимости от условий игрок теряет от 5% до 14% текущего количества золота. Спустя пару секунд его ковёр воскресает в рандомной точке карты с 0-ой текущей скоростью (будьте готовы сразу убегать от аномалий или кораблей!).\n   \n Каждый ковёр имеет радар, который позволяет увидеть что и кто находится в области действия радара (примерно 400 метров).\n\n Ковры могут столкнуться. В этом случае ковёр с меньшим количеством очков здоровья уничтожается, а ковёр с большим количеством очков здоровья получает урон равный количеству очков здоровья ковра, с которым он столкнулся. Если очков здоровья было в равном количестве — уничтожаются оба.\n\n  При столкновении нескольких ковров просчитываются последовательно все столкновения. Очерёдность столкновений выбирается рандомно.\n\n\n# Управление ковром-самолётом\n\n   Управление ковром будет заключаться в прикладывании к нему силы по XY. Прикладывая силу к ковру, вы таким образом задаёте для него ускорение.\n \n  Если приложить силу к ковру на несколько секунд, а затем убрать её, ковёр продолжит движение с достигнутой за это время скоростью. Например, ковёр стоит неподвижно, на него не действуют аномалии, и вы приложили силу {X, Y} равную {5, 0} ровно на 1 секунду. После того как приложенная сила исчезнет, ковёр продолжит движение со скоростью 5 метров в секунду.\n\n  Пример: \n  - при приложении силы только к нижней части ковра, он будет двигаться вверх\n  - при приложении одинаковой силы снизу и слева, ковёр начнет двигаться под углом 45° вправо вверх.\n  \n  Больше примеров вы можете увидеть в разделе **“Примеры управления ковром”**.\n\n  В игре установлены пределы для скорости и ускорения, то есть нельзя разгоняться бесконечно.\n  Данные по максимальной скорости и ускорению есть в API.\n\n\n# Столкновение ковров\n\n Если в какой-то момент два ковра окажутся на расстоянии <= 5 метров друг от друга — будет считаться, что они столкнулись.\n\n\n  # Атака ковров\n\n Каждый ковер оснащен орудием, имеющим следующие характеристики:\n **радиус дальности** — 200 метров\n\n **КД** — 5 секунд\n\n **радиус поражения** — 30 метров\n\n **урон** — 30 единиц (все в радиусе поражения)\n\n **урон по своим** — да\n\n Выстрел работает моментально, то есть, если при вызове API вы находитесь в допустимом для атаки радиусе — вы гарантированно попадаете.\n\n Текущее КД вы можете увидеть в свойствах своих ковров. Если значение равно 0, то орудие готово к выстрелу. \n\n\n # Описание констант в API\n\n\n  **maxAccel** — max ускорение ковра.\n\n **maxSpeed** — max скорость ковра.\n\n **mapSize** — размер карты.\n\n **transportRadius** — радиус ковра учитываемый при столкновении с другими коврами.\n\n **wantedList** — список игроков, за которых назначена награда.\n\n **reviveTimeoutSec** - время на восстановление ковра после его уничтожения\n\n # Описание параметров соперников в API\n\n\n  **killBounty** — текущая награда за уничтожение его ковра.\n\n # Описание параметров ковра в API\n\n\n  **velocity** — текущая скорость корабля по X, Y.\n **x, y** — текущие координаты ковра-самолёта.\n\n **anomalyAcceleration** — значение приложенной силы (ускорения) по X, Y. Тут указана внешняя сила от аномалий (результирующая).\n\n **selfAcceleration** — значение приложенной силы (ускорения) по X, Y. Тут указана сила, заданная игроком.\n\n **health** — очки здоровья ковра.\n\n **shieldCooldownMs** время в мс до восстановления щита.\n\n **shieldLeftMs** время в мс до окончания действия щита.\n\n **attackCooldownMs** — время в мс до восстановления атаки.\n\n **deathCount** — сколько раз был уничтожен этот ковёр.\n\n **id** — уникальный идентификатор ковра, сохраняется после уничтожения.\n\n **status** — текущее состояние ковра: alive, dead.\n\n # АФК игроки\n\n\n Спустя 1 минуту бездействия игрока его ковры будут удалены с карты. Ковры появятся как только игрок снова начнет ими управлять.\n# Щит ковра\n\n\n Каждый ковёр имеет щит, который может полностью защитить его от выстрелов на протяжении всего времени действия. У щита есть время восстановления (КД).\n  \n  Время действия щита — 5 секунд, КД — 40 секунд.\nТекущее КД вы можете увидеть в свойствах своих или чужих ковров.\n\n# Доска наград\n\n\n Во время игры происходит подсчёт стрика уничтожения ковров соперников. Счёт ведётся, пока игрок не потеряет свой ковёр от выстрелов другого игрока.\n\n Если счёт достигает 5-ти, имя игрока попадает на доску «наград за голову», и местоположение его ковров открывается всем игрокам на карте, независимо от расстояния.\n\n Пока имя игрока находится на доске наград, он:\n - получает дополнительно 2% золота соперника при уничтожении его ковра.\n - теряет на 1% * {стрик} золота больше, когда его ковер уничтожает другой игрок. В сумме с базовым процентом значение не может быть больше 14%.\n - приносит на 1% * {стрик} золота больше тому, кто уничтожил его ковёр. В сумме с базовым процентом значение не может быть больше 14%.\n\n За уничтожение ковра игрока, имя которого находится на доске, счётчик стрика не увеличивается. \n\n\n\n\n\n\n\n\n\n # Достижения\nВо время финальных раундов можно заработать ачивки:\n\n ***Исследователь*** — тот, кто первым исследует любым ковром 30 уникальных аномалий (исследовать = врезаться)\n\n  ***Шериф*** — тот, кто первым уничтожит максимальное количество ковров игроков с доски наград.\n\n ***Бандит*** — тот, кто займёт ТОП списка на доске наград (набрать наибольший стрик).\n\n Команды, которым удастся первым выполнить условия какой-то ачивки, получат награду — фирменные рюкзаки на каждого участника.\n\n  Обратите внимание, каждый тип достижения может получить только одна команда (которая первой выполнила его условия).\n\n  В начале каждого раунда в чате будет озвучено, какое достижение будет доступно в этом раунде.\n\n\n\n\n # Кто победит\n\n Выиграет тот игрок, кто на момент окончания финала будет иметь больше всех золота в сумме за все финальные раунды.\n\n  Если количество очков у нескольких игроков будет одинаковым, выиграет тот, кто потерял меньше ковров.\n\n  Определение призовых мест производится только в случае наличия достаточного количества участвующих.\n\n  Статистику по раундам можно смотреть по ссылке — [Статистика](https://datsteam.dev/datsmagic/magicstats).\n  \n# Примеры управления ковром\n\n Вы можете использовать вектора для управления вашим ковром, длина вектора будет являться приложенной силой (ускорением).\n *для удобства отображения в примере все значения будут округлены до 2-х знаков после запятой.\n\n **Первичное получение информации по карте и коврам:**\n\n Для этого используем **API /move** передав в параметре **transports** пустой массив. \n\n **Валидация переданных данных на сервер:**\n\n Валидация проходит для каждого параметра отдельно. Рассмотрим на следующем примере:\n Предположим, мы задали управление двум коврам: для одного задали скорость (длина вектора) 5 и включение щита, для второго — скорость 15 и атаку по цели.\n Так как в игре есть ограничение на максимальную скорость, для второго ковра не будет применено заданное значение.\n Итогом вызова API будет следующее: для первого ковра будут выполняться обе команды, для второго — только атака по цели. Информация по ошибке по второму кораблю будет получена в соответствующем поле ответа. \n\n **Добраться до золота:**\n\n Ваш ковер (А) находится в координатах x1 = 100, y1 = 100.\n  Вы видите аномалию (В) на координатах x2 = 120, y2 = 50.\n  Вы хотите за кратчайшее время добраться до неё.\n Порядок действий:\n 1) постройте вектор АВ = {x2 - x1; y2-y1} = {20, -50}\n  2) длина нашего вектора считается так |AB| = √(20*20+-50*-50) = 53.85\n В игре есть ограничение на максимальное ускорение (10), поэтому нам нужно привести длину вектора к такой величине, которая не превышает лимит.\n Чтобы привести вектор к заданной длине, например к 10, нужно посчитать коэффициент масштабирования\n k = 10/53.85 = 0.18\n и затем построить новый вектор на основе полученного коэффициента\n  А1В1 = {20*0.18; -50*0.18} = {3.6; -9}\n проверяем длину\n |A1B1| = √(3.6*3.6+-9*-9)= = 9.69\n\n  Теперь максимальная приложенная сила соответствует ограничению игры.\n 3) Используем **API /move** и задаем для нашего корабля ускорение в поле\n  acceleration {“x”: 3.6, “y”: -9}.\n\n **Остановиться:**\n  \n  Предположим, наш ковёр имеет текущую скорость (velocity) равную {5, 5}, и мы хотим его остановить.\n  Для этого достаточно на 1 секунду приложить “обратный” вектор силы к нашему ковру.\n  Используем API /move и задаем для нашего корабля ускорение в поле\n  acceleration {“x”: -5, “y”: -5}.\n  \n  Данные примеры показывают самые простые случаи, когда на ваш ковёр не действуют аномалии и/или его начальная скорость равна 0.\n\n  \n  \n\n# API\n\n  Вы уже получили свой токен при регистрации. Это означает, что в каждый запрос необходимо добавлять заголовок X-Auth-Token с полученным вами значением.\n\n\n  **Cервер:** https://games.datsteam.dev/\n\n  **Тестовый сервер:** https://games-test.datsteam.dev/"
  },
  "host": "games.datsteam.dev",
  "paths": {
    "/play/magcarp/player/move": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "Player logs: crashes, collected bounties, collisions, attacks, revives etc...",
        "parameters": [
          {
            "description": "list of transports with desired acceleration",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/command.Player"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/view.Player"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/puberr.PubErr"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/swagger.ErrNotAuthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/swagger.ErrForbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/swagger.ErrNotFound"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/swagger.ErrTooManyUserRequests"
            }
          }
        }
      }
    },
    "/rounds/magcarp": {
      "get": {
        "tags": [
          "player"
        ],
        "summary": "game rounds",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/dto.RoundList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/puberr.PubErr"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "command.Player": {
      "type": "object",
      "properties": {
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/command.Transport"
          }
        }
      }
    },
    "command.Transport": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "acceleration": {
          "$ref": "#/definitions/plane.Vector"
        },
        "activateShield": {
          "type": "boolean"
        },
        "attack": {
          "$ref": "#/definitions/plane.Coordinate"
        },
        "id": {
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "dto.MoveResponse": {
      "type": "object",
      "properties": {
        "anomalies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Anomaly"
          }
        },
        "attackCooldownMs": {
          "type": "integer",
          "example": 1000
        },
        "attackDamage": {
          "type": "integer",
          "example": 10
        },
        "attackExplosionRadius": {
          "type": "number",
          "example": 10
        },
        "attackRange": {
          "type": "number",
          "example": 10
        },
        "bounties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Bounty"
          }
        },
        "enemies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Enemy"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mapSize": {
          "$ref": "#/definitions/plane.Coordinate"
        },
        "maxAccel": {
          "type": "number",
          "example": 1
        },
        "maxSpeed": {
          "type": "number",
          "example": 10
        },
        "name": {
          "type": "string",
          "example": "player1"
        },
        "points": {
          "type": "integer",
          "example": 100
        },
        "reviveTimeoutSec": {
          "type": "integer",
          "example": 2
        },
        "shieldCooldownMs": {
          "type": "integer",
          "example": 10000
        },
        "shieldTimeMs": {
          "type": "integer",
          "example": 5000
        },
        "transportRadius": {
          "type": "integer",
          "example": 5
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Transport"
          }
        },
        "wantedList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Enemy"
          }
        }
      }
    },
    "plane.Coordinate": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "x": {
          "type": "integer",
          "example": 1
        },
        "y": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "plane.Vector": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "example": 1.2
        },
        "y": {
          "type": "number",
          "example": 1.2
        }
      }
    },
    "puberr.PubErr": {
      "type": "object",
      "properties": {
        "errCode": {
          "type": "integer",
          "format": "int32",
          "example": 22
        },
        "error": {
          "type": "string",
          "example": "description of the error"
        }
      }
    },
    "swagger.ErrForbidden": {
      "type": "object",
      "properties": {
        "errCode": {
          "type": "integer",
          "format": "int32",
          "example": 26
        },
        "error": {
          "type": "string",
          "example": "forbidden or user is banned"
        }
      }
    },
    "swagger.ErrNotAuthorized": {
      "type": "object",
      "properties": {
        "errCode": {
          "type": "integer",
          "format": "int32",
          "example": 14
        },
        "error": {
          "type": "string",
          "example": "not authorized"
        }
      }
    },
    "swagger.ErrNotFound": {
      "type": "object",
      "properties": {
        "errCode": {
          "type": "integer",
          "format": "int32",
          "example": 11
        },
        "error": {
          "type": "string",
          "example": "not found"
        }
      }
    },
    "swagger.ErrTooManyUserRequests": {
      "type": "object",
      "properties": {
        "errCode": {
          "type": "integer",
          "format": "int32",
          "example": 24
        },
        "error": {
          "type": "string",
          "example": "too many requests from this user"
        }
      }
    },
    "view.Anomaly": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "effectiveRadius": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "radius": {
          "type": "number"
        },
        "strength": {
          "type": "number"
        },
        "velocity": {
          "$ref": "#/definitions/plane.Vector"
        },
        "x": {
          "type": "integer",
          "example": 1
        },
        "y": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "view.Bounty": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "points": {
          "type": "integer",
          "example": 100
        },
        "radius": {
          "type": "integer",
          "example": 10
        },
        "x": {
          "type": "integer",
          "example": 1
        },
        "y": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "view.Enemy": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "health": {
          "type": "integer",
          "example": 100
        },
        "killBounty": {
          "type": "integer",
          "example": 10
        },
        "shieldLeftMs": {
          "type": "integer",
          "example": 5000
        },
        "status": {
          "type": "string",
          "enum": [
            "alive",
            "dead"
          ],
          "example": "alive"
        },
        "velocity": {
          "$ref": "#/definitions/plane.Vector"
        },
        "x": {
          "type": "integer",
          "example": 1
        },
        "y": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "view.Global": {
      "type": "object",
      "properties": {
        "anomalies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Anomaly"
          }
        },
        "bounties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Bounty"
          }
        },
        "mapSize": {
          "$ref": "#/definitions/plane.Coordinate"
        },
        "players": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.GlobalPlayer"
          }
        }
      }
    },
    "view.GlobalPlayer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "player1"
        },
        "points": {
          "type": "integer",
          "example": 100
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Transport"
          }
        }
      }
    },
    "view.Player": {
      "type": "object",
      "properties": {
        "anomalies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Anomaly"
          }
        },
        "attackCooldownMs": {
          "type": "integer",
          "example": 1000
        },
        "attackDamage": {
          "type": "integer",
          "example": 10
        },
        "attackExplosionRadius": {
          "type": "number",
          "example": 10
        },
        "attackRange": {
          "type": "number",
          "example": 10
        },
        "bounties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Bounty"
          }
        },
        "enemies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Enemy"
          }
        },
        "mapSize": {
          "$ref": "#/definitions/plane.Coordinate"
        },
        "maxAccel": {
          "type": "number",
          "example": 1
        },
        "maxSpeed": {
          "type": "number",
          "example": 10
        },
        "name": {
          "type": "string",
          "example": "player1"
        },
        "points": {
          "type": "integer",
          "example": 100
        },
        "reviveTimeoutSec": {
          "type": "integer",
          "example": 2
        },
        "shieldCooldownMs": {
          "type": "integer",
          "example": 10000
        },
        "shieldTimeMs": {
          "type": "integer",
          "example": 5000
        },
        "transportRadius": {
          "type": "integer",
          "example": 5
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Transport"
          }
        },
        "wantedList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/view.Enemy"
          }
        }
      }
    },
    "view.Transport": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "anomalyAcceleration": {
          "$ref": "#/definitions/plane.Vector"
        },
        "attackCooldownMs": {
          "type": "integer",
          "example": 0
        },
        "deathCount": {
          "type": "integer",
          "example": 0
        },
        "health": {
          "type": "integer",
          "example": 100
        },
        "id": {
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "selfAcceleration": {
          "$ref": "#/definitions/plane.Vector"
        },
        "shieldCooldownMs": {
          "type": "integer",
          "example": 0
        },
        "shieldLeftMs": {
          "type": "integer",
          "example": 0
        },
        "status": {
          "type": "string",
          "enum": [
            "alive",
            "dead"
          ],
          "example": "alive"
        },
        "velocity": {
          "$ref": "#/definitions/plane.Vector"
        },
        "x": {
          "type": "integer",
          "example": 1
        },
        "y": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "dto.Round": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "example": 60
        },
        "endAt": {
          "type": "string",
          "example": "2021-01-01T00:00:00Z"
        },
        "name": {
          "type": "string",
          "example": "Round 1"
        },
        "repeat": {
          "type": "integer",
          "example": 1
        },
        "startAt": {
          "type": "string",
          "example": "2021-01-01T00:00:00Z"
        },
        "status": {
          "type": "string",
          "example": "active"
        }
      }
    },
    "dto.RoundList": {
      "type": "object",
      "properties": {
        "gameName": {
          "type": "string",
          "example": "defense"
        },
        "now": {
          "type": "string",
          "example": "2021-01-01T00:00:00Z"
        },
        "rounds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dto.Round"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  }
}